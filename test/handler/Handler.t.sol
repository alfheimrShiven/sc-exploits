// SPDX-License-Identifier: MIT

pragma solidity 0.8.20;

import {HandlerStatefulFuzzCatches} from "../../src/invariant-break/HandlerStatefulFuzzCatches.sol";
import {MockUSDC} from "../mocks/MockUSDC.sol";
import {YieldERC20} from "../mocks/YieldERC20.sol";
import {Test} from "forge-std/Test.sol";

contract Handler is Test {
    MockUSDC mockUsdc;
    YieldERC20 yieldERC20;
    address user;
    HandlerStatefulFuzzCatches hsfc;

    constructor(
        address _user,
        MockUSDC _mockUsdc,
        YieldERC20 _yieldERC20,
        HandlerStatefulFuzzCatches _hsfc
    ) {
        user = _user;
        mockUsdc = _mockUsdc;
        yieldERC20 = _yieldERC20;
        hsfc = _hsfc;
    }

    function depositMockUSDC(uint256 amount) public {
        bound(amount, 0, mockUsdc.balanceOf(user));
        vm.startPrank(user);
        mockUsdc.approve(address(hsfc), amount);
        hsfc.depositToken(mockUsdc, amount);
        vm.stopPrank();
    }

    function depositYieldERC20(uint256 amount) public {
        bound(amount, 0, yieldERC20.balanceOf(user));
        vm.startPrank(user);
        yieldERC20.approve(address(hsfc), amount);
        hsfc.depositToken(yieldERC20, amount);
        vm.stopPrank();
    }

    function withdrawMockUSDC() public {
        vm.prank(user);
        hsfc.withdrawToken(mockUsdc);
    }

    function withdrawYieldERC20() public {
        vm.prank(user);
        hsfc.withdrawToken(yieldERC20);
    }
}
