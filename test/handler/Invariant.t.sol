// SPDX-License-Identifier: MIT

pragma solidity 0.8.20;

import {HandlerStatefulFuzzCatches} from "../../src/invariant-break/HandlerStatefulFuzzCatches.sol";
import {Test} from "forge-std/Test.sol";
import {StdInvariant} from "forge-std/StdInvariant.sol";
import {MockUSDC} from "../mocks/MockUSDC.sol";
import {YieldERC20} from "../mocks/YieldERC20.sol";
import {IERC20} from "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import {Handler} from "./Handler.t.sol";

contract AttemptedBreakTest is StdInvariant, Test {
    address user = makeAddr("user");
    MockUSDC mockUSDC;
    YieldERC20 yieldERC20;
    IERC20[] supportedTokens;
    HandlerStatefulFuzzCatches public hsfc;
    uint256 public STARTING_AMOUNT;

    function setUp() external {
        vm.startPrank(user);
        yieldERC20 = new YieldERC20();
        mockUSDC = new MockUSDC();
        STARTING_AMOUNT = yieldERC20.INITIAL_SUPPLY();
        mockUSDC.mint(user, STARTING_AMOUNT);
        vm.stopPrank();

        // supportedTokens = [mockUSDC, yieldERC20];
        supportedTokens.push(mockUSDC);
        supportedTokens.push(yieldERC20);
        hsfc = new HandlerStatefulFuzzCatches(supportedTokens);

        Handler fuzzHandler = new Handler(user, mockUSDC, yieldERC20, hsfc);

        bytes4[] memory functionSelector = new bytes4[](4);

        functionSelector[0] = fuzzHandler.depositMockUSDC.selector;
        functionSelector[1] = fuzzHandler.depositYieldERC20.selector;
        functionSelector[2] = fuzzHandler.withdrawMockUSDC.selector;
        functionSelector[3] = fuzzHandler.withdrawYieldERC20.selector;

        targetSelector(
            FuzzSelector({
                addr: address(fuzzHandler),
                selectors: functionSelector
            })
        );
        targetContract(address(fuzzHandler));
    }

    function statefulFuzz_testInvariantBreaksHandler() external {
        // assertEq(hsfc.tokenBalances[user][mockUSDC], 0);
        // assertEq(hsfc.tokenBalances[user][yieldERC20], 0);

        vm.startPrank(user);
        hsfc.withdrawToken(mockUSDC);
        hsfc.withdrawToken(yieldERC20);
        vm.stopPrank();

        assertEq(mockUSDC.balanceOf(user), STARTING_AMOUNT);
        assertEq(yieldERC20.balanceOf(user), STARTING_AMOUNT);

        assertEq(mockUSDC.balanceOf(address(hsfc)), 0);
        assertEq(yieldERC20.balanceOf(address(hsfc)), 0);
    }
}
